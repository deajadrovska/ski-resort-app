version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:latest
    container_name: ski-resort-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: ski_resort_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - ski-resort-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Flask Backend API
  backend:
    image: deajadrovska/ski-resort-backend:latest  # Use DockerHub image
    container_name: ski-resort-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - MONGO_URI=mongodb://mongodb:27017/
      - FLASK_ENV=production
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ski-resort-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # React Frontend
  frontend:
    image: deajadrovska/ski-resort-frontend:latest  # Use DockerHub image
    container_name: ski-resort-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ski-resort-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Named volumes
volumes:
  mongodb_data:
    driver: local

# Custom network
networks:
  ski-resort-network:
    driver: bridge